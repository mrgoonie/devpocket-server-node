name: Deploy to Beta

on:
  push:
    branches: [beta]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: digitop/devpocket-nodejs
  KUBERNETES_NAMESPACE: devpocket-beta
  DOMAIN: api.beta.devpocket.app

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.6.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Run linting
        run: pnpm lint

      - name: Check formatting
        run: pnpm format --check

      - name: Run type checking
        run: pnpm build

      - name: Run full test suite
        run: pnpm test:ci:coverage
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-key-for-ci
          GOOGLE_CLIENT_ID: fake-google-client-id
          GOOGLE_CLIENT_SECRET: fake-google-client-secret
          RESEND_API_KEY: fake-resend-api-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: beta-tests
          name: beta-coverage

  semantic-release:
    runs-on: ubuntu-latest
    name: Semantic Release
    needs: test
    if: success() || github.event.inputs.force_deploy == 'true'
    
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.6.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run semantic release
        id: semantic
        run: pnpm release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    needs: [test, semantic-release]
    if: success() || github.event.inputs.force_deploy == 'true'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      build-number: ${{ github.run_number }}
      version: ${{ needs.semantic-release.outputs.new-release-version || 'beta-build' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Set version variables
        run: |
          if [ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]; then
            echo "VERSION=${{ needs.semantic-release.outputs.new-release-version }}" >> $GITHUB_ENV
            echo "TAG_PREFIX=beta-" >> $GITHUB_ENV
          else
            echo "VERSION=beta-build-${{ github.run_number }}" >> $GITHUB_ENV
            echo "TAG_PREFIX=beta-build-" >> $GITHUB_ENV
          fi
          echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=beta-latest
            type=raw,value=${{ env.TAG_PREFIX }}${{ env.VERSION }}
            type=raw,value=beta-${{ github.run_number }}-${{ env.SHORT_SHA }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Image digest
        run: echo "Built image with digest ${{ steps.build.outputs.digest }}"

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Kubernetes Beta
    needs: [test, semantic-release, build-and-push]
    if: success() || github.event.inputs.force_deploy == 'true'
    environment: beta
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_BETA }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get namespaces

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.KUBERNETES_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Prepare environment-specific manifests
        run: |
          # Create beta-specific manifests from templates
          mkdir -p k8s/beta
          
          # Determine image tag
          if [ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]; then
            IMAGE_TAG="beta-${{ needs.semantic-release.outputs.new-release-version }}"
          else
            IMAGE_TAG="beta-${{ github.run_number }}-${{ env.SHORT_SHA }}"
          fi
          
          # Copy and modify deployment for beta environment
          sed -e "s/namespace: devpocket-prod/namespace: ${{ env.KUBERNETES_NAMESPACE }}/g" \
              -e "s/image: docker.io\/digitop\/devpocket-nodejs:latest/image: ${{ env.DOCKER_REGISTRY }}\/${{ env.DOCKER_IMAGE }}:${IMAGE_TAG}/g" \
              -e "s/value: \"production\"/value: \"beta\"/g" \
              -e "s/value: \"info\"/value: \"debug\"/g" \
              -e "s/replicas: 1/replicas: 1/g" \
              k8s/deployment.yaml > k8s/beta/deployment.yaml
          
          # Copy and modify service for beta environment
          sed "s/namespace: devpocket-prod/namespace: ${{ env.KUBERNETES_NAMESPACE }}/g" \
              k8s/service.yaml > k8s/beta/service.yaml
          
          # Copy and modify ingress for beta environment
          sed -e "s/namespace: devpocket-prod/namespace: ${{ env.KUBERNETES_NAMESPACE }}/g" \
              -e "s/api.devpocket.app/${{ env.DOMAIN }}/g" \
              -e "s/devpocket-nodejs.prod.diginext.site/devpocket-nodejs.beta.diginext.site/g" \
              -e "s/tls-api-devpocket-app/tls-api-beta-devpocket-app/g" \
              -e "s/tls-devpocket-nodejs-prod-diginext-site/tls-devpocket-nodejs-beta-diginext-site/g" \
              k8s/ingress.yaml > k8s/beta/ingress.yaml
          
          # Copy namespace manifest
          sed "s/name: devpocket-prod/name: ${{ env.KUBERNETES_NAMESPACE }}/g" \
              k8s/namespace.yaml > k8s/beta/namespace.yaml
          
          echo "Using image tag: ${IMAGE_TAG}"
        env:
          SHORT_SHA: ${GITHUB_SHA:0:7}

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/beta/namespace.yaml
          kubectl apply -f k8s/beta/service.yaml
          kubectl apply -f k8s/beta/deployment.yaml
          kubectl apply -f k8s/beta/ingress.yaml

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/devpocket-nodejs -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }} -l app.kubernetes.io/name=devpocket-nodejs
          kubectl get services -n ${{ env.KUBERNETES_NAMESPACE }} devpocket-nodejs
          kubectl get ingress -n ${{ env.KUBERNETES_NAMESPACE }} devpocket-nodejs

      - name: Run smoke tests
        run: |
          # Wait for ingress to be ready
          sleep 60
          
          # Test the API health endpoint
          if curl -f https://${{ env.DOMAIN }}/api/v1/health; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            kubectl logs -n ${{ env.KUBERNETES_NAMESPACE }} -l app.kubernetes.io/name=devpocket-nodejs --tail=50
            exit 1
          fi

      - name: Run additional beta tests
        run: |
          # Additional smoke tests for beta environment
          echo "Running beta-specific validation tests..."
          
          # Test API endpoints
          curl -f https://${{ env.DOMAIN }}/api/v1/health/ready || exit 1
          echo "‚úÖ Ready endpoint test passed"

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [test, semantic-release, build-and-push, deploy]
    if: always()
    
    steps:
      - name: Deployment Success
        if: needs.deploy.result == 'success'
        run: |
          echo "üöÄ Beta deployment successful!"
          echo "‚úÖ Tests: ${{ needs.test.result }}"
          echo "‚úÖ Release: ${{ needs.semantic-release.result }}"
          echo "‚úÖ Build: ${{ needs.build-and-push.result }}"  
          echo "‚úÖ Deploy: ${{ needs.deploy.result }}"
          echo "üåê URL: https://${{ env.DOMAIN }}"
          echo "üè∑Ô∏è Version: ${{ needs.build-and-push.outputs.version }}"
          echo "üì¶ Build: ${{ needs.build-and-push.outputs.build-number }}"
          if [ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]; then
            echo "üéâ New release published: v${{ needs.semantic-release.outputs.new-release-version }}"
          fi

      - name: Deployment Failed
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Beta deployment failed!"
          echo "Tests: ${{ needs.test.result }}"
          echo "Release: ${{ needs.semantic-release.result }}"
          echo "Build: ${{ needs.build-and-push.result }}"  
          echo "Deploy: ${{ needs.deploy.result }}"
          exit 1