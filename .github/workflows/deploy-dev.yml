name: Deploy to Development

on:
  push:
    branches:
      - dev
      - develop
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'dev-latest'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: devpocket_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devpocket_test

      - name: Run database migrations
        run: pnpm prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devpocket_test

      - name: Run tests
        run: pnpm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devpocket_test
          JWT_SECRET: test-jwt-secret-key-for-ci
          GOOGLE_CLIENT_ID: fake-google-client-id
          GOOGLE_CLIENT_SECRET: fake-google-client-secret
          RESEND_API_KEY: fake-resend-api-key

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: devpocket/server
          tags: |
            type=ref,event=branch,suffix=-{{sha}}
            type=raw,value=dev-latest
            type=raw,value=dev-{{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    environment: development
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Generate development manifests
        run: |
          echo "Generating development manifests..."
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'dev-latest' }}"
          ./scripts/deployment/generate-manifests.sh \
            -e dev \
            -i "devpocket/server:$IMAGE_TAG" \
            -o k8s/generated/dev

      - name: Deploy to development
        run: |
          echo "Deploying to development environment..."
          
          # Apply manifests in correct order
          kubectl apply -f k8s/generated/dev/namespace.yaml
          kubectl apply -f k8s/generated/dev/service.yaml
          kubectl apply -f k8s/generated/dev/deployment.yaml
          kubectl apply -f k8s/generated/dev/ingress.yaml
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/devpocket-nodejs -n devpocket-dev --timeout=600s
          
          # Verify deployment
          kubectl get pods -n devpocket-dev -l app.kubernetes.io/name=devpocket-nodejs

      - name: Health check
        run: |
          echo "Performing health checks..."
          
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=devpocket-nodejs -n devpocket-dev --timeout=300s
          
          # Get pod name for health check
          POD_NAME=$(kubectl get pods -n devpocket-dev -l app.kubernetes.io/name=devpocket-nodejs -o jsonpath='{.items[0].metadata.name}')
          
          # Check health endpoint
          if kubectl exec -n devpocket-dev $POD_NAME -- curl -f http://localhost:8000/api/v1/health; then
            echo "Development deployment health check passed"
          else
            echo "Development deployment health check failed"
            exit 1
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "Development Deployment Summary"
          echo "============================="
          echo "Environment: Development"
          echo "Namespace: devpocket-dev"
          echo "Image: devpocket/server:${{ github.event.inputs.image_tag || 'dev-latest' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          echo "Access URL: https://api.dev.devpocket.app"
          echo ""
          kubectl get all -n devpocket-dev