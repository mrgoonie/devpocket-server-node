name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: digitop/devpocket-nodejs
  KUBERNETES_NAMESPACE: devpocket-prod

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: devpocket_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devpocket_test

      - name: Run linting
        run: pnpm lint

      - name: Check formatting
        run: pnpm format --check

      - name: Run type checking
        run: pnpm build

      - name: Run tests with coverage
        run: pnpm test:ci:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devpocket_test
          JWT_SECRET: test-jwt-secret-key-for-ci
          GOOGLE_CLIENT_ID: fake-google-client-id
          GOOGLE_CLIENT_SECRET: fake-google-client-secret
          RESEND_API_KEY: fake-resend-api-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: ci-tests
          name: ci-coverage

  semantic-release:
    runs-on: ubuntu-latest
    name: Semantic Release
    needs: test
    if: success() || github.event.inputs.force_deploy == 'true'
    
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run semantic release
        id: semantic
        run: pnpm release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    needs: [test, semantic-release]
    if: success() || github.event.inputs.force_deploy == 'true'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      build-number: ${{ github.run_number }}
      version: ${{ needs.semantic-release.outputs.new-release-version || 'latest' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Set version variables
        run: |
          if [ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]; then
            echo "VERSION=${{ needs.semantic-release.outputs.new-release-version }}" >> $GITHUB_ENV
            echo "SEMANTIC_TAG=v${{ needs.semantic-release.outputs.new-release-version }}" >> $GITHUB_ENV
          else
            echo "VERSION=main-${{ github.run_number }}" >> $GITHUB_ENV
            echo "SEMANTIC_TAG=main-${{ github.run_number }}" >> $GITHUB_ENV
          fi
          echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.SEMANTIC_TAG }}
            type=raw,value=main-${{ github.run_number }}-${{ env.SHORT_SHA }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            VERSION=${{ env.VERSION }}
            BUILD_NUMBER=${{ github.run_number }}
            COMMIT_SHA=${{ github.sha }}

      - name: Image digest
        run: echo "Built image with digest ${{ steps.build.outputs.digest }}"

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Kubernetes
    needs: [test, semantic-release, build-and-push]
    if: success() || github.event.inputs.force_deploy == 'true'
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get namespaces

      - name: Generate production manifests
        run: |
          echo "Generating production manifests..."
          # Determine image tag based on semantic release
          if [ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]; then
            IMAGE_TAG="v${{ needs.semantic-release.outputs.new-release-version }}"
          else
            IMAGE_TAG="main-${{ github.run_number }}-${GITHUB_SHA:0:7}"
          fi
          
          ./scripts/deployment/generate-manifests.sh \
            -e prod \
            -i "${{ env.DOCKER_IMAGE }}:$IMAGE_TAG" \
            -o k8s/generated/prod

      - name: Apply Kubernetes manifests
        run: |
          # Apply manifests in correct order
          kubectl apply -f k8s/generated/prod/namespace.yaml
          kubectl apply -f k8s/generated/prod/configmap.yaml || echo "ConfigMap not found, skipping"
          kubectl apply -f k8s/generated/prod/secret.yaml || echo "Secret not found, skipping"
          kubectl apply -f k8s/generated/prod/service.yaml
          kubectl apply -f k8s/generated/prod/deployment.yaml
          kubectl apply -f k8s/generated/prod/ingress.yaml
          kubectl apply -f k8s/generated/prod/hpa.yaml || echo "HPA not found, skipping"

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/devpocket-nodejs -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }} -l app.kubernetes.io/name=devpocket-nodejs
          kubectl get services -n ${{ env.KUBERNETES_NAMESPACE }} devpocket-nodejs
          kubectl get ingress -n ${{ env.KUBERNETES_NAMESPACE }} devpocket-nodejs

      - name: Run smoke tests
        run: |
          # Wait for ingress to be ready
          sleep 30
          
          # Test the API health endpoint
          if curl -f https://api.devpocket.app/health; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            kubectl logs -n ${{ env.KUBERNETES_NAMESPACE }} -l app.kubernetes.io/name=devpocket-nodejs --tail=50
            exit 1
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "Production Deployment Summary"
          echo "============================="
          echo "Environment: Production"
          echo "Namespace: ${{ env.KUBERNETES_NAMESPACE }}"
          if [ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]; then
            echo "Image: ${{ env.DOCKER_IMAGE }}:v${{ needs.semantic-release.outputs.new-release-version }}"
            echo "Version: v${{ needs.semantic-release.outputs.new-release-version }}"
          else
            echo "Image: ${{ env.DOCKER_IMAGE }}:main-${{ github.run_number }}-${GITHUB_SHA:0:7}"
            echo "Version: main-${{ github.run_number }}"
          fi
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Build: ${{ github.run_number }}"
          echo ""
          echo "Access URL: https://api.devpocket.app"
          echo ""
          kubectl get all -n ${{ env.KUBERNETES_NAMESPACE }}

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [test, semantic-release, build-and-push, deploy]
    if: always()
    
    steps:
      - name: Deployment Success
        if: needs.deploy.result == 'success'
        run: |
          echo "üöÄ Production deployment successful!"
          echo "‚úÖ Tests: ${{ needs.test.result }}"
          echo "‚úÖ Release: ${{ needs.semantic-release.result }}"
          echo "‚úÖ Build: ${{ needs.build-and-push.result }}"  
          echo "‚úÖ Deploy: ${{ needs.deploy.result }}"
          echo "üåê URL: https://api.devpocket.app"
          echo "üè∑Ô∏è Version: ${{ needs.build-and-push.outputs.version }}"
          echo "üì¶ Build: ${{ needs.build-and-push.outputs.build-number }}"
          if [ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]; then
            echo "üéâ New release published: v${{ needs.semantic-release.outputs.new-release-version }}"
          fi

      - name: Deployment Failed
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Tests: ${{ needs.test.result }}"
          echo "Release: ${{ needs.semantic-release.result }}"
          echo "Build: ${{ needs.build-and-push.result }}"  
          echo "Deploy: ${{ needs.deploy.result }}"
          exit 1